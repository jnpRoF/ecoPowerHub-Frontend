// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EcoPowerHubService {
    address public owner; // The owner of the service contract
    uint256 public totalRevenue; // Total revenue generated by the service

    mapping(address => uint256) public investors; // Map of investors and their percentages

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function sellService(uint256 amount) public onlyOwner {
        // Calculate payments to investors and distribute
        for (address investor : investors) {
            uint256 share = (amount * investors[investor]) / 100;
            payable(investor).transfer(share);
        }

        // Update total revenue
        totalRevenue += amount;
    }

    function addInvestor(address investor, uint256 percentage) public onlyOwner {
        require(investor != address(0), "Invalid investor address");
        require(percentage > 0 && percentage <= 100, "Percentage must be between 1 and 100");
        investors[investor] = percentage;
    }
}

// Usage: Deploy this contract for each company/service on EcoPowerHub.
// Make sure that after sending the amount to each investor the remaining money stays in the contract. And opnly 
// the owner of the contract can withdraw it.